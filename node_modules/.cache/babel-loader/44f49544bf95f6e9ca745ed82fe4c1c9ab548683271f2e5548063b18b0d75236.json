{"ast":null,"code":"var _jsxFileName = \"/Users/josha/Documents/My-New-Stuff/CodeCademy/projects/appointment-planner-starting-v18/src/App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { RouterProvider, createBrowserRouter, createRoutesFromElements, Route, Navigate } from \"react-router-dom\";\nimport Root, { ROUTES } from \"./components/root/Root\";\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\n  const [contacts, setContacts] = useState([]);\n  const [appointments, setAppointments] = useState([]);\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments... basically make two functions that handle what happens \r\n  when a new contact/appointment is submitted in... IE store the new contact/appointment.\r\n  */\n  const handleAddContact = (name, phone, email) => {\n    setContacts([...contacts, {\n      name: name,\n      phone: phone,\n      email: email\n    }]);\n  };\n  const handleAddAppointment = (name, contact, date, time) => {\n    setAppointments([]);\n  };\n  const router = createBrowserRouter(createRoutesFromElements( /*#__PURE__*/_jsxDEV(Route, {\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 31\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: ROUTES.CONTACTS,\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: ROUTES.CONTACTS,\n      element: /*#__PURE__*/_jsxDEV(ContactsPage, {\n        contacts: contacts,\n        onAddContact: handleAddContact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 47\n      }, this) /* Add props to ContactsPage */\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: ROUTES.APPOINTMENTS,\n      element: /*#__PURE__*/_jsxDEV(AppointmentsPage, {\n        appointments: appointments,\n        onAddAppointment: handleAddAppointment,\n        contacts: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 51\n      }, this) /* Add props to AppointmentsPage */\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this)));\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ilNV2NNtl3t/F9tV3D6w+C6XRbg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","RouterProvider","createBrowserRouter","createRoutesFromElements","Route","Navigate","Root","ROUTES","AppointmentsPage","ContactsPage","useState","jsxDEV","_jsxDEV","App","_s","contacts","setContacts","appointments","setAppointments","handleAddContact","name","phone","email","handleAddAppointment","contact","date","time","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","to","CONTACTS","replace","onAddContact","APPOINTMENTS","onAddAppointment","_c","$RefreshReg$"],"sources":["/Users/josha/Documents/My-New-Stuff/CodeCademy/projects/appointment-planner-starting-v18/src/App.js"],"sourcesContent":["import React from \"react\";\r\nimport { RouterProvider, createBrowserRouter, createRoutesFromElements, Route, Navigate } from \"react-router-dom\"\r\nimport Root, { ROUTES } from \"./components/root/Root\";\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\nimport { useState } from 'react';\r\n\r\nfunction App() {\r\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\r\n  const [contacts, setContacts] = useState([]);\r\n  const [appointments, setAppointments] = useState([]);\r\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments... basically make two functions that handle what happens \r\n  when a new contact/appointment is submitted in... IE store the new contact/appointment.\r\n  */\r\n  const handleAddContact = (name, phone, email) => {\r\n    setContacts([...contacts, {\r\n      name: name,\r\n      phone: phone,\r\n      email: email,\r\n    },\r\n  ]);\r\n  };\r\n\r\n  const handleAddAppointment = (name, contact, date, time) => {\r\n    setAppointments([])\r\n  };\r\n\r\n  const router = createBrowserRouter(createRoutesFromElements(\r\n    <Route path=\"/\" element={ <Root/> }>\r\n      <Route index element={ <Navigate to={ROUTES.CONTACTS} replace/> }/>\r\n      <Route path={ROUTES.CONTACTS} element={ <ContactsPage contacts={contacts} onAddContact={handleAddContact} /> /* Add props to ContactsPage */ }/>\r\n      <Route path={ROUTES.APPOINTMENTS} element={ <AppointmentsPage appointments={appointments} onAddAppointment={handleAddAppointment} contacts={contacts}/> /* Add props to AppointmentsPage */ }/>\r\n    </Route>\r\n  ));\r\n  \r\n  return (\r\n    <RouterProvider router={router}/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,EAAEC,mBAAmB,EAAEC,wBAAwB,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AACjH,OAAOC,IAAI,IAAIC,MAAM,QAAQ,wBAAwB;AACrD,SAASC,gBAAgB,QAAQ,gDAAgD;AACjF,SAASC,YAAY,QAAQ,wCAAwC;AACrE,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;AACF;AACA;AACA;EACE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpD;AACF;AACA;AACA;AACA;EACE,MAAMS,gBAAgB,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAK;IAC/CN,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;MACxBK,IAAI,EAAEA,IAAI;MACVC,KAAK,EAAEA,KAAK;MACZC,KAAK,EAAEA;IACT,CAAC,CACF,CAAC;EACF,CAAC;EAED,MAAMC,oBAAoB,GAAGA,CAACH,IAAI,EAAEI,OAAO,EAAEC,IAAI,EAAEC,IAAI,KAAK;IAC1DR,eAAe,CAAC,EAAE,CAAC;EACrB,CAAC;EAED,MAAMS,MAAM,GAAGzB,mBAAmB,CAACC,wBAAwB,eACzDS,OAAA,CAACR,KAAK;IAACwB,IAAI,EAAC,GAAG;IAACC,OAAO,eAAGjB,OAAA,CAACN,IAAI;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;IAAAC,QAAA,gBACjCtB,OAAA,CAACR,KAAK;MAAC+B,KAAK;MAACN,OAAO,eAAGjB,OAAA,CAACP,QAAQ;QAAC+B,EAAE,EAAE7B,MAAM,CAAC8B,QAAS;QAACC,OAAO;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eACnErB,OAAA,CAACR,KAAK;MAACwB,IAAI,EAAErB,MAAM,CAAC8B,QAAS;MAACR,OAAO,eAAGjB,OAAA,CAACH,YAAY;QAACM,QAAQ,EAAEA,QAAS;QAACwB,YAAY,EAAEpB;MAAiB;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,CAAC;IAAiC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eAChJrB,OAAA,CAACR,KAAK;MAACwB,IAAI,EAAErB,MAAM,CAACiC,YAAa;MAACX,OAAO,eAAGjB,OAAA,CAACJ,gBAAgB;QAACS,YAAY,EAAEA,YAAa;QAACwB,gBAAgB,EAAElB,oBAAqB;QAACR,QAAQ,EAAEA;MAAS;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE,CAAC;IAAqC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACzL,CACT,CAAC;EAEF,oBACErB,OAAA,CAACX,cAAc;IAAC0B,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAE;AAErC;AAACnB,EAAA,CApCQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AAsCZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}